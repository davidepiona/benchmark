#%RAML 1.0
title: Benchmark
version: v0.1
/api:
    /movies:
        get:
            description: |
                Returns the list of available movies.
            responses:
                200:
                    description: |
                        All the movies found.
                    body:
                        application/json:
                            type: !include movie-list-type.schema
                            example: !include movie-list-example.schema  
        post:
            description: |
                Creates a new movie entry.
            body:
                application/json:
                    type: !include movie-post-type.schema
                    example: !include movie-post-example.schema
            responses:
                201: 
                    description: |
                        Movie created.
                    headers:
                        Location:
                            description: |
                                Location of the created resource. 
                    body:
                        application/json:
                            type: !include movie-get-type.schema
                            example: !include movie-get-example.schema
                409:
                    description: |
                        Already exists a Movie with the same ID.
        /{movieId}:
            uriParameters: 
                movieId:
                    displayName: movie ID
                    type: string
                    description: ID of the movie
                    example: d042d68d-1962-4dbd-b9f9-16cdcdfe58a7
                    required: true
            get:
                description: |
                    Returns, if any, the movie that matches the specified ID. 
                responses:
                    200:
                        description: |
                            Movie found and returned.   
                        body:
                            application/json:
                                type: !include movie-get-type.schema
                                example: !include movie-get-example.schema     
                    404:
                        description: |
                            Does not exist any movie that matches the specified ID.           
            delete:
                description: |
                    Deletes, if any, the movie that matches the specified ID.
                responses:
                    204:
                        description: |
                            Movie found and deleted.   
                    404:
                        description: |
                            Does not exist any movie that matches the specified ID.
            put:
                description: |
                    Modifies, if any, the movie that matches the specified ID; uses the not-NULL fields of the given new object.
                body:
                    application/json:
                        type: !include movie-post-type.schema
                        example: !include movie-post-example.schema 
                responses:
                        204:
                            description: |
                                Operation completed successfully.  
                        404:
                            description: |
                                Does not exist any movie that matches the specified ID.
    /upload/{movieId}:
        uriParameters: 
            movieId:
                displayName: movie ID
                type: string
                description: ID of the movie
                example: d042d68d-1962-4dbd-b9f9-16cdcdfe58a7
                required: true
        post: 
            description: |
                    Uploads a new movie, associated to the specified movie ID.
            body:
                multipart/form-data:
                    properties:
                        file:
                            description: The movie to be uploaded.
                            required: true
                            type: file 
            responses:
                204:
                    description: |
                        Operation completed successfully. 
                404:
                    description: |
                        Does not exist any movie that matches the specified ID.
                409:
                    description: |
                        Problems with the upload of the file.
/stream/{movieId}:
    uriParameters: 
        movieId:
            displayName: movie ID
            type: string
            description: ID of the movie
            example: d042d68d-1962-4dbd-b9f9-16cdcdfe58a7
            required: true
    get:
        description: |
            Returns, if any, the movie that matches the specified ID.
        responses:
            200:
                description: |
                    Movie found and returned.
                body:
                    video/*:
                        properties:
                            file:
                                description: The movie for the streaming reproduction.
                                required: true
                                type: file     
            404:
                description: |
                    Does not exist any movie that matches the specified ID.        
   


# /api/movies GET             Returns the list of available movies (200 - moviesList)
#     /movies POST            Creates a new movie entry (@body - movie)(201 - movie / 409 - conflict, movie yet existing)
#         /{ID}   GET         Returns, if any, the movie that matches the specified ID (@path - ID)(200 - movie / 404 - not found)
#         /{ID}   DELETE      Deletes, if any, the movie that matches the specified ID (@path - ID)(204 / 404 - not found)          
#         /{ID}   PATCH       Modifies, if any, the movie that matches the specified ID; uses the not-NULL fields of the given new object. (@path -ID, @body movie)(204 / 404 - not found)
#     /upload/{ID} POST       Uploads a new movie, associated to the specified movie ID (@path - ID, @body multipart Movie) (204 / 400 - bad request)
# /stream/{ID}    GET         Returns the stream of bytes that matches the movie with the specified ID (@path - ID) (???)


# LOCATION ????